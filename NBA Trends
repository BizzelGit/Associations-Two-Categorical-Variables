import numpy as np
import pandas as pd
from scipy.stats import pearsonr, chi2_contingency
import matplotlib.pyplot as plt
import seaborn as sns

import codecademylib3
np.set_printoptions(suppress=True, precision = 2)

nba = pd.read_csv('./nba_games.csv')

# Subset Data to 2010 Season, 2014 Season
nba_2010 = nba[nba.year_id == 2010]
nba_2014 = nba[nba.year_id == 2014]

print(nba_2010.head())
print(nba_2014.head())

knicks_pts_10 = nba_2010[nba_2010.fran_id == 'Knicks']
nets_pts_10 = nba_2010[nba_2010.fran_id == 'Nets']

print(knicks_pts_10)
print(nets_pts_10)

#print mean scores:
#calculate mean difference:

knicks_points_mean = np.mean(nba_2010.pts)
scores_rural_mean = np.mean(nba_2010.pts)

diff_means_2010 = (knicks_points_mean - scores_rural_mean)

print(diff_means_2010)

knicks_pts10 = nba_2010.pts[nba_2010.fran_id == 'Knicks']
nets_pts10 = nba_2010.pts[nba_2010.fran_id == 'Nets']

plt.figure()
plt.hist(knicks_pts10 , color="blue", label="Knicks", normed=True, alpha=0.5)
plt.hist(nets_pts10 , color="red", label="Nets", normed=True, alpha=0.5)
plt.legend()
plt.show()

knicks_pts_14 = nba_2014[nba_2014.fran_id == 'Knicks']
nets_pts_14 = nba_2014[nba_2014.fran_id == 'Nets']

print(knicks_pts_14)
print(nets_pts_14)

#print mean scores:
#calculate mean difference:

knicks_points_mean = np.mean(nba_2014.pts)
scores_rural_mean = np.mean(nba_2014.pts)

diff_means_2014 = (knicks_points_mean - scores_rural_mean)

print(diff_means_2014)

knicks_pts14 = nba_2014.pts[nba_2014.fran_id == 'Knicks']
nets_pts14 = nba_2014.pts[nba_2014.fran_id == 'Nets']

plt.figure()
plt.hist(knicks_pts14 , color="blue", label="Knicks", normed=True, alpha=0.5)
plt.hist(nets_pts14 , color="red", label="Nets", normed=True, alpha=0.5)
plt.legend()
plt.show()

#create the box-plot here:
plt.figure()
sns.boxplot(data = nba_2010, x = 'fran_id', y = 'pts')
plt.show()

location_result_freq = pd.crosstab(nba.game_result, nba.game_location)

print(location_result_freq)

location_result_proportions = location_result_freq/len(nba)

print(location_result_proportions)

# calculate the expected contingency table if there's no association and save it as expected
chi2, pval, dof, expected = chi2_contingency(location_result_freq)

# print out the expected frequency table
print("expected contingency table (no association):")
print(np.round(expected))

print(chi2)

point_diff_forecast_cov = np.cov(nba_2010.forecast, nba_2010.point_diff)

print(point_diff_forecast_cov)

point_diff_forecast_corr, p = pearsonr(nba.forecast, nba.point_diff)

print(point_diff_forecast_corr)

plt.figure()
plt.scatter(x = nba.forecast, y = nba.point_diff)
plt.xlabel('Forecast')
plt.ylabel('Point Off')
plt.show()
